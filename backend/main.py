from selenium import webdriver
from selenium.webdriver.firefox.options import Options
import time
import pickle
import logging
import os
import subprocess
import asyncio
from fastapi import FastAPI, HTTPException, Form, BackgroundTasks, WebSocket, WebSocketDisconnect
from yt_dlp import YoutubeDL
from fastapi.middleware.cors import CORSMiddleware
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞
from counter import counter_app

COOKIES_PATH = "./app/cookies.txt/cookies.txt"





# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.WARNING)
logger = logging.getLogger(__name__)

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ FFmpeg
FFMPEG_PATH = r"/usr/bin/ffmpeg"
os.environ["PATH"] = os.path.dirname(FFMPEG_PATH) + os.pathsep + os.environ.get("PATH", "")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFmpeg
if not os.path.isfile(FFMPEG_PATH):
    logger.error("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")
    raise RuntimeError("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø—É—Ç—å —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

# –ü–∞–ø–∫–∞ –∑–∞–≥—Ä—É–∑–æ–∫
DOWNLOAD_DIR = os.path.join(os.path.expanduser("~"), "Downloads")
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# –°–æ–∑–¥–∞—ë–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI()
app.mount("/counter", counter_app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:5173",
        "https://videovault.ru"
    ],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏
download_progress = {"progress": 0, "message": ""}

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è yt-dlp
def update_yt_dlp():
    try:
        subprocess.run(["pip", "install", "--upgrade", "yt-dlp", "--quiet"], check=True)
        logger.info("yt-dlp –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except subprocess.CalledProcessError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ yt-dlp: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ
def get_video_info(url: str):
    try:
        ydl_opts = {
            "quiet": True,
            "cookiefile": "./app/cookies.txt/cookies.txt", 
        }
        with YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)
            formats = [{
                "format_id": f["format_id"],
                "quality": f.get("format_note", "N/A"),
                "ext": f["ext"],
                "resolution": f.get("height", "N/A"),
                "vcodec": f.get("vcodec", "none"),
                "type": "Audio" if f.get("vcodec", "none") == "none" else "Video"
            } for f in info["formats"]]
            
            return {"title": info["title"], "formats": formats}
    except Exception as e:
         logger.error(f"Error fetching video info: {e}")
         return None

@app.post("/get_video_info/")
async def video_info(url: str = Form(...)):
    video_info = get_video_info(url)
    if (video_info):
        return video_info
    raise HTTPException(status_code=400, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ")

@app.websocket("/ws/progress/")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    try:
        while True:
            await websocket.send_json(download_progress)
            await asyncio.sleep(1)  # –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    except WebSocketDisconnect:
        logger.info("WebSocket disconnected")


def login_and_save_cookies(email: str, password: str):
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")

    driver = webdriver.Firefox(options=options)
    try:
        driver.get("https://accounts.google.com/signin/v2/identifier?service=youtube")

        time.sleep(2)
        driver.find_element("id", "identifierId").send_keys(email)
        driver.find_element("id", "identifierNext").click()

        time.sleep(3)
        driver.find_element("name", "password").send_keys(password)
        driver.find_element("id", "passwordNext").click()

        time.sleep(10)  # –ü–æ–¥–æ–∂–¥–∏ –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è

        os.makedirs(os.path.dirname(COOKIES_PATH), exist_ok=True)
        with open(COOKIES_PATH, "wb") as file:
            pickle.dump(driver.get_cookies(), file)

        return True
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:", e)
        return False
    finally:
        driver.quit()

def load_cookies_to_browser(driver):
    if not os.path.exists(COOKIES_PATH):
        return
    with open(COOKIES_PATH, "rb") as file:
        cookies = pickle.load(file)
        for cookie in cookies:
            driver.add_cookie(cookie)

@app.post("/auth/")
async def auth_youtube(email: str = Form(...), password: str = Form(...)):
    success = login_and_save_cookies(email, password)
    if success:
        return {"message": "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∏ –∫—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."}
    raise HTTPException(status_code=401, detail="–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")

@app.post("/download_video/")
async def download_video(
    background_tasks: BackgroundTasks,
    url: str = Form(...),
    video_format_id: str = Form(...),
    download_audio: bool = Form(False),
):
    global download_progress
    download_progress = {"progress": 0, "message": "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å"}

    def download_task(url, video_format_id, download_audio):
        def progress_hook(d):
            global download_progress
            if d['status'] == 'downloading' and 'total_bytes' in d and d['total_bytes']:
                download_progress['progress'] = d['downloaded_bytes'] / d['total_bytes'] * 100
                download_progress['message'] = f"–ó–∞–≥—Ä—É–∑–∫–∞: {download_progress['progress']:.2f}%"
            elif d['status'] == 'finished':
                download_progress['progress'] = 100
                download_progress['message'] = "–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

        try:
            update_yt_dlp()

            video_opts = {
                "format": f"{video_format_id}+bestaudio/best",
                "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s_%(timestamp)s_video.%(ext)s"),
                "progress_hooks": [progress_hook],
                "ffmpeg_location": FFMPEG_PATH,
                "cookiefile": "./app/cookies.txt/cookies.txt"  # üëà –î–æ–±–∞–≤—å
            }

            audio_opts = {
                "format": "bestaudio",
                "outtmpl": os.path.join(DOWNLOAD_DIR, "%(title)s_%(timestamp)s_audio.%(ext)s"),
                "progress_hooks": [progress_hook],
                "ffmpeg_location": FFMPEG_PATH,
                "cookiefile": "./app/cookies.txt/cookies.txt"  # üëà –î–æ–±–∞–≤—å
            }

            video_file, audio_file = None, None
            with YoutubeDL(video_opts) as ydl:
                info = ydl.extract_info(url, download=False)
                ydl.download([url])
                video_file = os.path.join(DOWNLOAD_DIR, f"{info['title']}_{info['timestamp']}_video.{info['ext']}")

            if download_audio:
                with YoutubeDL(audio_opts) as ydl:
                    ydl.download([url])
                    audio_file = os.path.join(DOWNLOAD_DIR, f"{info['title']}_{info['timestamp']}_audio.{info['ext']}")

                output_file = os.path.join(DOWNLOAD_DIR, f"final_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4")

                ffmpeg_command = [FFMPEG_PATH, '-i', video_file, '-i', audio_file, '-c:v', 'copy', '-c:a', 'aac', '-threads', '4', '-preset', 'ultrafast', output_file]
                subprocess.run(ffmpeg_command, shell=True)

            download_progress['message'] = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            download_progress['progress'] = -1
            download_progress['message'] = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."

    background_tasks.add_task(download_task, url, video_format_id, download_audio)
    return {"message": "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å –≤ —Ñ–æ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ."}
